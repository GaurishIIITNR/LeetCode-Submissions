{"id":799511456,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1663148230,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/799511456/","is_pending":"Not Pending","title":"Middle of the Linked List","memory":"7.1 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* middleNode(ListNode* head) {\n        ListNode*curr=head; // defining a pointer which is on the head.\n        int cnt=0; //count \n        while(curr){ // pointer is not null\n            cnt++;\n            curr=curr->next;\n        } \n        // upper mid is (cnt+2)/2\n        int p=0;\n        curr=head;\n        while(curr){\n           p++;\n            if(p==(cnt+2)/2)return curr;\n            curr=curr->next;\n        }\n        return curr;\n    }\n};","compare_result":"111111111111111111111111111111111111","title_slug":"middle-of-the-linked-list","has_notes":false,"notes":"","topic_tags":[]}